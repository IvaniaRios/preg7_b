{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPJ1esg0NDMlw4M7alXVugd"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yJS3LH9h1G1s","executionInfo":{"status":"ok","timestamp":1728218181499,"user_tz":240,"elapsed":356,"user":{"displayName":"Alakir Meneses peres","userId":"09853550789562380167"}},"outputId":"ad8a579a-7aa6-4a22-b43f-9690ece319b6"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Generación 1\n","\n","Población\tFunción de Evaluación\n","0.4013\t\t-5.1944e-01\n","1.6025\t\t3.5327e+00\n","0.5549\t\t-4.7984e-01\n","0.8537\t\t-2.3668e-01\n","0.1330\t\t-4.1525e-01\n","0.7013\t\t-3.9202e-01\n","1.8465\t\t8.6307e+00\n","0.9738\t\t-5.0448e-02\n","0.2170\t\t-4.8473e-01\n","1.1813\t\t4.8253e-01\n","Cruce entre: 1.8465 y 1.8465\n","Hijos generados: 1.8465 y 1.8465\n","Cruce entre: 0.9738 y 0.8537\n","Hijos generados: 0.8968 y 0.9307\n","Cruce entre: 0.9738 y 1.8465\n","Hijos generados: 1.6892 y 1.1311\n","Cruce entre: 0.8537 y 0.7013\n","Hijos generados: 0.7244 y 0.8307\n","Cruce entre: 1.8465 y 1.6025\n","Hijos generados: 1.8307 y 1.6183\n","Individuo mutado: 1.0893\n","\n","Generación 2\n","\n","Población\tFunción de Evaluación\n","1.8465\t\t8.6307e+00\n","1.8465\t\t8.6307e+00\n","1.0893\t\t2.0477e-01\n","0.9307\t\t-1.2520e-01\n","1.6892\t\t4.8780e+00\n","1.1311\t\t3.2128e-01\n","0.7244\t\t-3.7323e-01\n","0.8307\t\t-2.6523e-01\n","1.8307\t\t8.1533e+00\n","1.6183\t\t3.7492e+00\n","Cruce entre: 1.8307 y 1.8465\n","Hijos generados: 1.8329 y 1.8444\n","Cruce entre: 1.8465 y 1.8465\n","Hijos generados: 1.8465 y 1.8465\n","Cruce entre: 1.8307 y 1.8465\n","Hijos generados: 1.8448 y 1.8324\n","\n","Generación 3\n","\n","Población\tFunción de Evaluación\n","1.1311\t\t3.2128e-01\n","1.1311\t\t3.2128e-01\n","1.8329\t\t8.2167e+00\n","1.8444\t\t8.5642e+00\n","1.8307\t\t8.1533e+00\n","1.8307\t\t8.1533e+00\n","1.8465\t\t8.6307e+00\n","1.8465\t\t8.6307e+00\n","1.8448\t\t8.5775e+00\n","1.8324\t\t8.2039e+00\n","Cruce entre: 1.8465 y 1.8465\n","Hijos generados: 1.8465 y 1.8465\n","Cruce entre: 1.8448 y 1.8465\n","Hijos generados: 1.8461 y 1.8452\n","Cruce entre: 1.8465 y 1.8329\n","Hijos generados: 1.8334 y 1.8460\n","Cruce entre: 1.8307 y 1.8324\n","Hijos generados: 1.8311 y 1.8320\n","Cruce entre: 1.8448 y 1.8465\n","Hijos generados: 1.8450 y 1.8463\n","Individuo mutado: 2.0117\n","\n","Mejor individuo: x = 2.0117, f(x) = 1.5650e+01\n"]}],"source":["import random\n","\n","# Parámetros del algoritmo genético\n","tamaño_poblacion = 10\n","n_generaciones = 3\n","probabilidad_cruce = 0.7\n","probabilidad_mutacion = 0.2\n","rango_x = (0, 2)  # Rango de valores de x\n","\n","# Función objetivo\n","def funcion_objetivo(x):\n","    if x < 0:\n","        return float('-inf')  # Penalización por valores negativos\n","    return x**(2*x) - 1  # f(x) = x^(2x) - 1\n","\n","# Crear población inicial\n","def crear_poblacion(tamaño):\n","    return [random.uniform(*rango_x) for _ in range(tamaño)]\n","\n","# Seleccionar padres por torneo\n","def seleccion_torneo(poblacion):\n","    torneo = random.sample(poblacion, 3)  # Seleccionar 3 individuos al azar\n","    mejor_individuo = max(torneo, key=funcion_objetivo)\n","    return mejor_individuo\n","\n","# Cruce de dos padres\n","def cruzar(padre1, padre2):\n","    punto_cruce = random.random()  # Punto de cruce aleatorio\n","    hijo1 = (padre1 * punto_cruce) + (padre2 * (1 - punto_cruce))\n","    hijo2 = (padre2 * punto_cruce) + (padre1 * (1 - punto_cruce))\n","    return hijo1, hijo2\n","\n","# Mutación de un individuo\n","def mutar(individuo):\n","    return individuo + random.uniform(-0.5, 0.5)  # Mutación aleatoria\n","\n","# Inicialización\n","poblacion = crear_poblacion(tamaño_poblacion)\n","\n","# Evolución de la población\n","for generacion in range(n_generaciones):\n","    print(f\"\\nGeneración {generacion + 1}\")\n","\n","    # Evaluar la población\n","    fitnesses = [funcion_objetivo(ind) for ind in poblacion]\n","\n","    # Mostrar población y evaluación\n","    print(\"\\nPoblación\\tFunción de Evaluación\")\n","    for i, ind in enumerate(poblacion):\n","        print(f\"{ind:.4f}\\t\\t{fitnesses[i]:.4e}\")\n","\n","    # Crear la siguiente generación\n","    nueva_poblacion = []\n","\n","    while len(nueva_poblacion) < tamaño_poblacion:\n","        padre1 = seleccion_torneo(poblacion)\n","        padre2 = seleccion_torneo(poblacion)\n","\n","        if random.random() < probabilidad_cruce:\n","            hijo1, hijo2 = cruzar(padre1, padre2)\n","            nueva_poblacion.extend([hijo1, hijo2])\n","            print(f\"Cruce entre: {padre1:.4f} y {padre2:.4f}\")\n","            print(f\"Hijos generados: {hijo1:.4f} y {hijo2:.4f}\")\n","        else:\n","            nueva_poblacion.append(padre1)\n","            nueva_poblacion.append(padre2)\n","\n","    # Mutar la nueva población\n","    for i in range(len(nueva_poblacion)):\n","        if random.random() < probabilidad_mutacion:\n","            nueva_poblacion[i] = mutar(nueva_poblacion[i])\n","            print(f\"Individuo mutado: {nueva_poblacion[i]:.4f}\")\n","\n","    # Actualizar la población\n","    poblacion = nueva_poblacion\n","\n","# Evaluar la última generación\n","fitnesses = [funcion_objetivo(ind) for ind in poblacion]\n","mejor_individuo = max(poblacion, key=funcion_objetivo)\n","mejor_fitness = funcion_objetivo(mejor_individuo)\n","\n","print(f\"\\nMejor individuo: x = {mejor_individuo:.4f}, f(x) = {mejor_fitness:.4e}\")\n"]},{"cell_type":"markdown","source":["# Analisis e interpretacion de los resultados\n","\n","# Generación 1\n","**Población Inicial:** Compuesta por 10 individuos con diversos valores de\n","𝑥.\n","\n","**Mejor Individuo:** 1.8465 con una evaluación de 8.6307, lo que indica que es el valor más óptimo.\n","\n","**Cruces y Mutaciones:** Se realizaron varios cruces, generando nuevos individuos, y se registró una mutación a 1.0893.\n","\n","# Generación 2\n","**Población Mejorada:** La mayoría de los individuos son de la primera generación, con una función de evaluación predominantemente positiva.\n","\n","**Conservación del Mejor Individuo:** 1.8465 sigue siendo el mejor.\n","\n","**Cruces Efectivos:** Los hijos generados están cerca de los mejores padres, sugiriendo convergencia hacia soluciones óptimas.\n","\n","# Generación 3\n","**Población Homogénea:** Muchos individuos tienen valores de evaluación similares, mostrando un buen rendimiento.\n","\n","**Mantención del Mejor:** 1.8465 sigue destacándose, con otros individuos también cerca en evaluación.\n","\n","**Cruces Productivos:** Se generan hijos que continúan siendo buenos.\n","#Interpretación\n","**Convergencia:** El algoritmo está acercándose a un valor óptimo, especialmente alrededor de 1.8465.\n","\n","**Diversidad:** Aunque la diversidad se mantiene, se podría ajustar la tasa de mutación para explorar más soluciones.\n","\n","**Eficiencia:** El algoritmo ha demostrado ser efectivo en maximizar la función objetivo a través de selección, cruce y mutación."],"metadata":{"id":"5RY-9Le21gmU"}}]}